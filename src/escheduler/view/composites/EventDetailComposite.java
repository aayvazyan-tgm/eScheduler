package escheduler.view.composites;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.OptionGroup;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.VerticalSplitPanel;

import escheduler.model.Comment;
import escheduler.model.Eventdate;
import escheduler.model.Participant;

/**
 * Custom Vaadin Component that displays the details (type, organiser, description, participants)
 * of an event as well as a voting area for the dates and the comments for the chosen event
 *
 * @author Freudensprung Fabian
 * @version Jun 1, 2014
 */
public class EventDetailComposite extends CustomComponent {
	private VerticalLayout mainLayout;
	private VerticalSplitPanel splitPanel;
	private TabSheet detailTabs;
	private Panel commentPanel;
	private VerticalLayout commentLayout;
	private ListSelect participantList;
	private OptionGroup dateVote;
	private Panel topPanel;
	private VerticalLayout topLayout;
	private Label description;
	private Label organiser;
	private Label type;
	private Label eventName;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public EventDetailComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// verticalSplitPanel_1
		splitPanel = buildVerticalSplitPanel_1();
		mainLayout.addComponent(splitPanel);
		
		return mainLayout;
	}

	
	private VerticalSplitPanel buildVerticalSplitPanel_1() {
		// common part: create layout
		splitPanel = new VerticalSplitPanel();
		splitPanel.setImmediate(false);
		splitPanel.setWidth("100.0%");
		splitPanel.setHeight("100.0%");
		
		// topPanel
		topPanel = buildTopPanel();
		splitPanel.addComponent(topPanel);
		
		// detailTabs
		detailTabs = buildDetailTabs();
		splitPanel.addComponent(detailTabs);
		
		return splitPanel;
	}

	
	private Panel buildTopPanel() {
		// common part: create layout
		topPanel = new Panel();
		topPanel.setImmediate(false);
		topPanel.setWidth("100.0%");
		topPanel.setHeight("100.0%");
		
		// topLayout
		topLayout = buildTopLayout();
		topPanel.setContent(topLayout);
		
		return topPanel;
	}

	
	private VerticalLayout buildTopLayout() {
		// common part: create layout
		topLayout = new VerticalLayout();
		topLayout.setImmediate(false);
		topLayout.setWidth("100.0%");
		topLayout.setHeight("100.0%");
		topLayout.setMargin(false);
		
		// eventName
		eventName = new Label();
		eventName.setStyleName("h1");
		eventName.setImmediate(false);
		eventName.setWidth("-1px");
		eventName.setHeight("31px");
		eventName.setValue("Name");
		topLayout.addComponent(eventName);
		
		// type
		type = new Label();
		type.setStyleName("light");
		type.setCaption("Type");
		type.setImmediate(false);
		type.setWidth("-1px");
		type.setHeight("-1px");
		type.setValue("Type");
		topLayout.addComponent(type);
		
		// organiser
		organiser = new Label();
		organiser.setStyleName("light");
		organiser.setCaption("Organiser");
		organiser.setImmediate(false);
		organiser.setWidth("-1px");
		organiser.setHeight("-1px");
		organiser.setValue("Name");
		topLayout.addComponent(organiser);
		
		// description
		description = new Label();
		description.setStyleName("light");
		description.setCaption("Description");
		description.setImmediate(false);
		description.setWidth("100.0%");
		description.setHeight("-1px");
		description
				.setValue("Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.");
		topLayout.addComponent(description);
		
		return topLayout;
	}

	
	private TabSheet buildDetailTabs() {
		// common part: create layout
		detailTabs = new TabSheet();
		detailTabs.setImmediate(true);
		detailTabs.setWidth("100.0%");
		detailTabs.setHeight("100.0%");
		
		// dateVote
		dateVote = new OptionGroup();
		dateVote.setImmediate(false);
		dateVote.setWidth("100.0%");
		dateVote.setHeight("100.0%");
		detailTabs.addTab(dateVote, "Date", null);
		
		// participantList
		participantList = new ListSelect();
		participantList.setImmediate(false);
		participantList.setWidth("100.0%");
		participantList.setHeight("100.0%");
		detailTabs.addTab(participantList, "Participants", null);
		
		// commentPanel
		commentPanel = buildCommentPanel();
		detailTabs.addTab(commentPanel, "Comments", null);
		
		return detailTabs;
	}

	
	private Panel buildCommentPanel() {
		// common part: create layout
		commentPanel = new Panel();
		commentPanel.setImmediate(false);
		commentPanel.setWidth("100.0%");
		commentPanel.setHeight("100.0%");
		
		// commentLayout
		commentLayout = new VerticalLayout();
		commentLayout.setImmediate(false);
		commentLayout.setWidth("100.0%");
		commentLayout.setHeight("100.0%");
		commentLayout.setMargin(false);
		commentPanel.setContent(commentLayout);
		commentPanel.setSizeFull();
		
		return commentPanel;
	}
	
	public ListSelect getParticipantList() {
		return participantList;
	}


	public void setParticipantList(ListSelect participantList) {
		this.participantList = participantList;
	}


	public OptionGroup getDateVote() {
		return dateVote;
	}


	public void setDateVote(OptionGroup dateVote) {
		this.dateVote = dateVote;
	}


	public String getDescription() {
		return description.getValue();
	}


	public void setDescription(String description) {
		this.description.setValue(description);
	}


	public String getOrganiser() {
		return organiser.getValue();
	}


	public void setOrganiser(String organiser) {
		this.organiser.setValue(organiser);
	}


	public Label getType() {
		return type;
	}


	public void setType(Label type) {
		this.type = type;
	}


	public String getEventName() {
		return eventName.getValue();
	}


	public void setEventName(String eventName) {
		this.eventName.setValue(eventName);
	}


	public boolean addParticipant(String name) {
		participantList.addItem(name);
		return true;
	}
	
	public boolean addDate(String date) {
		dateVote.addItem(date);
		return true;
	}
	public boolean removeDate(String date) {
		dateVote.removeItem(date);
		return true;
	}
	
	public boolean addComment(CommentComposite comment){
		commentLayout.addComponent(comment);
		return true;
	}
	
	public boolean loadDetail(escheduler.model.Event e) {
		setEventName(e.getName());
		setDescription(e.getDescription());
		setOrganiser(e.getOrganisator().getUsername());
		
		participantList.removeAllItems();
		Collection<Participant> pa = e.getParticipants();
		Iterator<Participant> itpa = pa.iterator();
		while(itpa.hasNext()) {
			participantList.addItem(((Participant)itpa.next()).getUser().getUsername());
		}
		
		commentLayout.removeAllComponents();
		Collection<Comment> co = e.getComments();
		Iterator<Comment> itco = co.iterator();
		while(itco.hasNext()) {
			Comment c = (Comment) itco.next();
			this.addComment(new CommentComposite(c.getAuthor().getUsername(), c.getDate().toString(), c.getText()));
		}
		
		dateVote.removeAllItems();
		Collection<Eventdate> da = e.getEventdates();
		Iterator<Eventdate> itda = da.iterator();while(itda.hasNext()) {
			dateVote.addItem(((Eventdate)itda.next()).getStart().toString());
		}
		
		return true;
	}
		

}
